swagger: '2.0'
info:
  description: Сервер книжного магазина
  version: 1.0.0
  title: Книжный магазин
host: localhost
basePath: /api
tags:
  - name: product-controller
    description: Контролер товаров
  - name: basket-controller
    description: Контролер корзины
  - name: order-controller
    description: Контролер заказов
schemes:
  - http
paths:
  /books:
    get:
      tags:
        - product-controller
      summary: получить книги
      description: получение списка книг с учетом пагинации и сортировки
      operationId: getBookList
      produces:
        - application/json
      parameters:
        - name: start
          in: query
          type: integer
          default: 0
          description: 'порядок книги, начиная с которого возвращать книги'
        - name: count
          in: query
          type: integer
          default: 10
          description: количество книг в ответе
        - name: sort
          in: query
          type: string
          description: сортировка (список полей через запятую)
        - name: order
          in: query
          type: string
          description: 'Порядок сортировки (a|d для каждого поля, где a - asc, d- desc)'
          enum:
            - a
            - d
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        '401':
          description: Unauthorized
    post:
      tags:
        - product-controller
      summary: Добавить книгу
      description: добавление книги
      operationId: createBook
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: добавляемая книга
          schema:
            $ref: '#/definitions/Book'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Book'
        '401':
          description: Unauthorized
  /books/search:
    get:
      tags:
        - product-controller
      summary: поиск книг
      description: >-
        получение списка книг по поисковому запросу с учетом фильтров и
        пагинации
      operationId: searchBooks
      produces:
        - application/json
      parameters:
        - name: query
          in: query
          type: string
          description: поисковая строка
          required: false
        - name: title
          in: query
          type: boolean
          description: поиск по названию
          required: false
        - name: authors
          in: query
          type: boolean
          description: поиск по авторам
          required: false
        - name: categories
          in: query
          type: boolean
          description: поиск по категориям
          required: false
        - name: start
          in: query
          type: integer
          default: 0
          description: 'порядок книги, начиная с которого возвращать книги'
        - name: count
          in: query
          type: integer
          default: 10
          description: количество книг в ответе
        - name: sort
          in: query
          type: string
          description: сортировка (список полей через запятую)
        - name: order
          in: query
          type: string
          description: 'порядок сортировки (a|d для каждого поля, где a - asc, d- desc)'
          enum:
            - a
            - d
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        '401':
          description: Unauthorized
  '/books/{id}':
    get:
      tags:
        - product-controller
      summary: получить книгу по id
      description: получение книги по id
      operationId: getBookById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
          description: id требуемой книги
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Book'
        '401':
          description: Unauthorized
    put:
      tags:
        - product-controller
      summary: обновление книги
      description: обновление книги с указаным id
      operationId: saveBook
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
          description: id обновляемой книги
        - in: body
          name: body
          description: обновляемая книга
          schema:
            $ref: '#/definitions/Book'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Book'
        '401':
          description: Unauthorized
    delete:
      tags:
        - product-controller
      summary: удаление книги
      description: удаление книги с указаным id
      operationId: deleteBook
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
          description: id удаляемой книги
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Book'
        '401':
          description: Unauthorized
  /categories:
    get:
      tags:
        - product-controller
      summary: получить список категорий
      description: получение списка категорий на которые деляться книги (жанры)
      operationId: getCategoriesList
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
        '401':
          description: Unauthorized
  /categories/books:
    get:
      tags:
        - product-controller
      summary: получить список книг по категории
      description: получение списка книг относяшихся к указанным категориям
      operationId: getBookListByCategory
      produces:
        - application/json
      parameters:
        - name: categoryList
          in: query
          description: массив id категорий
          type: array
          items:
            type: integer
            format: int64
        - name: start
          in: query
          type: integer
          default: 0
          description: 'порядок книги, начиная с которого возвращать книги'
        - name: count
          in: query
          type: integer
          default: 10
          description: количество книг в ответе
        - name: sort
          in: query
          type: string
          description: сортировка (список полей через запятую)
        - name: order
          in: query
          type: string
          description: 'порядок сортировки (a|d для каждого поля, где a - asc, d- desc)'
          enum:
            - a
            - d
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        '401':
          description: Unauthorized
  /authors:
    get:
      tags:
        - product-controller
      summary: получить список авторов
      description: получение списка авторов с пагинацией и сортировкой
      operationId: getAuthorsList
      produces:
        - application/json
      parameters:
        - name: start
          in: query
          type: integer
          default: 0
          description: 'порядок автора, начиная с которого возвращать авторов'
        - name: count
          in: query
          type: integer
          default: 10
          description: количество авторов в ответе
        - name: sort
          in: query
          type: string
          description: сортировка (список полей через запятую)
        - name: order
          in: query
          type: string
          description: 'порядок сортировки (a|d для каждого поля, где a - asc, d- desc)'
          enum:
            - a
            - d
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Author'
        '401':
          description: Unauthorized
  /authors/books:
    get:
      tags:
        - product-controller
      summary: получить список книг по авторам
      description: получение списка книг относяшихся к указанным авторам
      operationId: getBookListByAuthor
      produces:
        - application/json
      parameters:
        - name: authorList
          in: query
          description: массив id авторов
          type: array
          items:
            type: integer
            format: int64
        - name: start
          in: query
          type: integer
          default: 0
          description: 'порядок книги, начиная с которого возвращать книги'
        - name: count
          in: query
          type: integer
          default: 10
          description: количество книг в ответе
        - name: sort
          in: query
          type: string
          description: сортировка (список полей через запятую)
        - name: order
          in: query
          type: string
          description: 'порядок сортировки (a|d для каждого поля, где a - asc, d- desc)'
          enum:
            - a
            - d
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        '401':
          description: Unauthorized
  /basket:
    get:
      tags:
        - basket-controller
      summary: получить книги в корзине
      description: получение книг которые были добавленны данным пользователем в корзину
      operationId: getBasket
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderItem'
        '401':
          description: Unauthorized
    post:
      tags:
        - basket-controller
      summary: добавить книгу в корзину
      description: добавление книги в корзину
      operationId: addItemInBasket
      produces:
        - application/json
      parameters:
        - name: id
          in: query
          description: id добавляемой книги
          type: integer
          format: int64
        - name: count
          in: query
          description: количество
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
    put:
      tags:
        - basket-controller
      summary: изменить количество для указанной книги в корзине
      description: изменение количества для указанной книги
      operationId: changeItemInBasket
      produces:
        - application/json
      parameters:
        - name: id
          in: query
          description: id книги для которой надо изменить количество
          type: integer
          format: int64
        - name: count
          in: query
          description: новое количество
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
    delete:
      tags:
        - basket-controller
      summary: удалить книгу в корзине
      description: удаление книги в корзине
      operationId: deleteItemInBasket
      produces:
        - application/json
      parameters:
        - name: id
          in: query
          description: id книги для которой надо изменить количество
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
  /orders:
    get:
      tags:
        - order-controller
      summary: получить заказы
      description: получение оформленных заказов
      operationId: getOrderList
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
        '401':
          description: Unauthorized
    post:
      tags:
        - order-controller
      summary: создать заказ
      description: создание заказа
      operationId: createOrder
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: создаваемый заказ
          schema:
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
  '/orders/{id}':
    put:
      tags:
        - order-controller
      summary: изменить заказ
      description: изменение заказа
      operationId: changeOrder
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: id заказа который нужно изменить
          type: integer
          format: int64
        - in: body
          name: body
          description: изменяемый заказ
          schema:
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
    delete:
      tags:
        - order-controller
      summary: удалить заказ
      description: удаление заказа
      operationId: deleteOrder
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          description: id заказа который нужно изменить
          type: integer
          format: int64
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
definitions:
  Publisher:
    type: object
    description: издательство
    properties:
      id:
        type: integer
        format: int64
        description: уникальный идентификатор издательства
        example: 12345678
      deleted:
        type: boolean
        description: признак удаления
        example: false
      name:
        type: string
        description: название издательства
        example: ЭКСМО
  BookSeries:
    type: object
    description: серия книг
    properties:
      id:
        type: integer
        format: int64
        description: уникальный идентификатор книжной серии
        example: 12345678
      deleted:
        type: boolean
        description: признак удаления
        example: false
      name:
        type: string
        description: название серии книг
        example: Идеальная жена
      description:
        type: string
        description: описание серии книг
        example: Бестселлеры для девушек проверенные временем
  Author:
    type: object
    description: автор
    properties:
      id:
        type: integer
        format: int64
        description: уникальный идентификатор автора
        example: 12345678
      firstName:
        type: string
        description: имя
        example: Александр
      middleName:
        type: string
        description: отчество
        example: Сергеевич
      lastName:
        type: string
        description: фамилия
        example: Пушкин
  BookAuthor:
    type: object
    description: автор книги
    properties:
      posititon:
        type: integer
        format: int32
        description: позиция в списке авторов
      author:
        $ref: '#/definitions/Author'
        description: автор
      book:
        $ref: '#/definitions/Book'
        description: книга
  City:
    type: object
    description: город издания
    properties:
      id:
        type: integer
        format: int64
        description: уникальный идентификатор города издания
        example: 12345678
      deleted:
        type: boolean
        example: false
      name:
        type: string
        description: название города
        example: Москва
      codeCity:
        type: string
        description: код города
        example: 495
  Language:
    type: object
    description: язык книги
    properties:
      id:
        type: integer
        format: int64
        description: уникальный идентификатор языка издания
        example: 12345678
      deleted:
        type: boolean
        example: false
      name:
        type: string
        description: название языка
        example: Русский
      codeLanguage:
        type: string
        description: код языка
        example: RUS
  Category:
    type: object
    description: категория(жанр) книги
    properties:
      id:
        type: integer
        format: int64
        description: уникальный идентификатор категории
        example: 12345678
      text:
        type: string
        description: название категории
        example: Художественная литература
  Book:
    type: object
    description: книга
    properties:
      id:
        type: integer
        format: int64
        description: уникальный идентификатор книги
        example: 12345678
      title:
        type: string
        description: название книги
        example: Капитанская дочка
      subtitle:
        type: string
        description: подзаголовок
        example: Действие этого исторического романа разворачивается в далёкой оренбургской крепости во время восстания Емельяна Пугачёва, куда для службы приезжает молодой помещик Пётр Гринёв.
      edition:
        type: integer
        format: int32
        description: номер издания
        example: 2
      ISBN:
        type: string
        description: международный стандартный книжный номер
        example: 978-5-04-091745-7
      UDC:
        type: string
        description: индекс универсальной десятичной классификации
        example: 821.161.1
      BBK:
        type: string
        description: индекс библиотечно - библиографической классификации
        example: 84(2Рос=Рус)1я44
      cutterCode:
        type: string
        description: авторский знак
        example: Пушкин А. С.
      publicationYear:
        type: string
        format: date-time
        description: год издания
        example: 2018
      circulation:
        type: integer
        format: int32
        description: тираж
        example: 5000
      price:
        type: number
        description: цена
        example: 198.05
      inStock:
        type: integer
        format: int32
        description: в наличии
        example: 231
      publisher:
        $ref: '#/definitions/Publisher'
        description: издательство
      authors:
        type: array
        items:
          $ref: '#/definitions/BookAuthor'
        description: авторы книги
      city:
        $ref: '#/definitions/City'
        description: город издания
      language:
        $ref: '#/definitions/Language'
        description: язык издания
      bookSeries:
        $ref: '#/definitions/BookSeries'
        description: серия книг
      categories:
        type: array
        description: категории(жанр) книги
        items:
          $ref: '#/definitions/Category'
  OrderItem:
    type: object
    description: элемент корзины или заказа (одна позиция в корзине или заказе)
    properties:
      book:
        description: книга
        $ref: '#/definitions/Book'
      count:
        description: количество
        type: integer
        format: int32
        example: 2
  Order:
    type: object
    description: Заказ
    properties:
      id:
        type: integer
        format: int64
        description: уникальный идентификатор заказа
        example: 12222233
      deleted:
        type: boolean
        description: признак удаления
        example: false
      firstName:
        type: string
        description: имя получателя заказа
        example: Владимир
      lastName:
        type: string
        description: фамилия получателя заказа
        example: Путин
      email:
        type: string
        description: email получателя заказа
        example: prezident@mail.ru
      phoneNumber:
        type: string
        description: телефон получателя заказа
        example: +79000000001
      shippingAddress:
        type: string
        description: адрес получателя заказа
        example: 100000, Москва, Кремль, кабинет 1
      paymentMethod:
        type: string
        description: способ оплаты заказа
        example: visa
      discount:
        type: number
        description: скидка
        example: 50%
      totalCost:
        type: number
        description: итоговая стоимость
        example: 198.05
      status:
        type: string
        description: статус заказа
        enum:
          - payd
          - shipping
          - delivery
          - unpaid
        example: shipping
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
